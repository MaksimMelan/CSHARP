using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

namespace EmptyLines
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /* Любой дурак может написать код, понятный компьютеру. Хорошие программисты пишут код понятный людям. 
             * Мартин Фаулер
             * 
             * Цели хорошего форматирования
             * 
             * Точноно представляь  логическую структуру кода
             * * основная теморема форматирования гласит, что хорошее визуальное форматирование показывает
             * логическую структуру кода
             * 
             * Единообразно показывать логическую структуру кода
             * * Единый стиль для всего кода
             * 
             * Улучшать читабельность 
             * Схема форматирования, использующая пробелы и разделители только там, где они требуются компилятору,
             * логична, но читать такой код невозможно. Хорошая структура форматирования упрощает чтение, восприятие
             * и понимание кода.
             * 
             * Выдерживать процедуру исправления
             * *Лучшие схемы форматирования хорошо переносят модификацию кода. Исправление одной строки не должно 
             * приводить к изменению нескольких других.
             * 
             * Способы форматирования
             * Пробелы, знаки табуляции, переводы строк и пустые строки, - это основное средство для
             * демонстрации структуры программы.
             * 
             * Комбинация Ctrl+K+D автоматически форматирует код в VS, кроме пустых строк.
             * 
             * Комбинацию горячих клавишь в других версияхVS ищи в Правка-Дополнительно-Форматировать документ.
             * 
             * Группировка
             * В литературе мыли группируются в абзацы. Хорошо написанный абзац содержит предложения, отностящиеся 
             * только к определённой идее. Он  не должен содержать посторонних пердложений. Точно так же абзац кода
             * должен содержать только взаимосвязанные  операторы, выполняющие одно задание.
             * 
             * Пустые строки
             * Кроме необходимости гурппировать взаимосвязанные операторы, очень важно отделять несвязанные выражения 
             * друг от друга.
             * 
             * Наало нового абзаца в книге обозначается отсутвием или пустой строкой. Начало нового абзаца в коде 
             * нужно указывать с помощью пустой строки.
             * Пустые строки позволяют проедемонстрированть организацию программы. Вы можете использовать их для 
             * деления групп взаимосвязанных операторов на абзацы, отделения методов друг от друга.
             * 
             * Общие требования к пустым строкам
             * 
             * Классы оделяем друг от друга пустой строкой.
             * 
             * В классе отделяем путой строкой следующие блоки:
             * * блок полей
             * * конструктор
             * * блолк свойств
             * * методы
             * 
             * Если в методе код можно разделить на логические блоки:
             * * блок констанот,
             * * блок переменных,
             * * блок запроса ифнормации от пользователя,
             * * блок вывода информации, 
             * * блок for(),
             * * блок while(),
             * * блок if(),
             * * блок switch()
             * то выделяем эти блоки пустыи строками ( даже если в блоке одна строка).
             * 
             * Внутри каждого  логического блока также можно делать разбивку на дополнительные блоки,
             * елси это выделит взаимосвязанные группы или улучшит посприятие и читаемость кода.
             * * Пустые строке НЕ ставятся: с прилегающей внутренней стороны фигурных скобок {}.
             * * Не должно выть более одной пустой строки подряд.
             * 
             * Примеры
             * 1. Классы при объявлении отделяем друг от друга путой строкой:
             * классы всегда должны быть разделены
             */
            {               // пустая строка V - поставленна автоматически
                class Card
            }
            {               // пустая строка V - поставленна автоматически
                class Deck
            }
            
            /*
             * 2. Конструктор отделяем пустыми строками сверху от полей, снизу от свойств/методов:
             * Конструктор это одлеьный блок
             */
            class Card
            {
                private string _rank;
                private string _suit;
                // пустая строка
                public Card(string rank, string suit)
                {
                    _rank = rank;
                    _suit = suit;
                }
            }// пустая строка V - поставленна автоматически
            public void ShjwInfo()
            {
                Console.WriteLine();
            }

            /* 
             * 3. Свойство при создании отделяем путой строкой сверху от конструкотора, снизу от метода.
             * Если свойство занимает больше одной строки, отделяем с обеих сторон:
             */
            class Card
            {
                private string _rank;
                private string _suit;
                // пустая строка V - поставленна автоматически
                public Card(string rank, string suit)
                {
                    _rank = rank;
                    _suit = suit;
                }
            }// пустая строка V - поставленна автоматически
            public void ShjwInfo()
            {
                // пустая строка
                PublicKey int Value { get; private set; }
                Console.WriteLine();    // НУЖНА пустая строка
                {
                    Console.WriteLine();
                }     
            }
        }
    }
}
